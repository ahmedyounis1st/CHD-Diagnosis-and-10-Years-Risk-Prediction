# -*- coding: utf-8 -*-
"""chd_10_years_risk_data_preprocessing_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EM978fdPHMLLPB_HaN-2jJDpHZMGMQCS

# Project: 

## Table of Contents
<ul>
<li><a href="#intro">Introduction</a></li>
<li><a href="#wrangling">Data Wrangling</a></li>
<li><a href="#preprocessing">Data Preprocessing</a></li>
</ul>

<a id='intro'></a>
## Introduction 

World Health Organization has estimated 12 million deaths occur worldwide, every year due to Heart diseases. Half the deaths in the United States and other developed countries are due to cardio vascular diseases. The early prognosis of cardiovascular diseases can aid in making decisions on lifestyle changes in high risk patients and in turn reduce the complications.

### Source
The dataset is publically available on the Kaggle website, and it is from an ongoing cardiovascular study on residents of the town of Framingham, Massachusetts. The classification goal is to predict whether the patient has 10-year risk of future coronary heart disease (CHD).The dataset provides the patients’ information. It includes over 4,000 records and 15 attributes.

## Setup
"""

# Commented out IPython magic to ensure Python compatibility.
# import pakcages and libraries needed for the project
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
sns.set_style('darkgrid')

"""<a id='wrangling'></a>
## Data Wrangling

### General Properties

### Assessing & Building Intuition
"""

# Loading data and printing out a few lines. 
df = pd.read_csv("framingham.csv")
df.head()

df.columns

"""* Column ["male"] needs to be more general.
* Some Columns needs to be renamed

__Attributes__

Each attribute is a potential risk factor. There are both demographic, behavioral and medical risk factors.

__Demographic__

|__Column__|__Description__|
|:---------|:--------------|
|• Male: |male or female (Nominal)|
|• Age: |Age of the patient (Continuous)|

__Behavioral__

|__Column__|__Description__|
|:---------|:--------------|
|• Current Smoker: |whether or not the patient is a current smoker (Nominal)|
|• Cigs Per Day: |the number of cigarettes that the person smoked on average in one day.|

__Medical (history)__

|__Column__|__Description__|
|:---------|:--------------|
|• BP Meds: |whether or not the patient was on blood pressure medication (Nominal)|
|• Prevalent Stroke: |whether or not the patient had previously had a stroke (Nominal)|
|• Prevalent Hyp: |whether or not the patient was hypertensive (Nominal)|
|• Diabetes: |whether or not the patient had diabetes (Nominal)|

__Medical (current)__

|__Column__|__Description__|
|:---------|:--------------|
|• Tot Chol: |total cholesterol level (Continuous)|
|• Sys BP: |systolic blood pressure (Continuous)|
|• Dia BP: |diastolic blood pressure (Continuous)|
|• BMI: |Body Mass Index (Continuous)|
|• Heart Rate: |heart rate (Continuous)|
|• Glucose: |glucose level (Continuous)|

__Predict variable (desired target)__

• 10 year risk of coronary heart disease CHD (binary: “1”, means “Yes”, “0” means “No”)
"""

# inspecting numbers of the dataset rows and columns
df.shape

"""* The dataset has 4238 rows and 16 columns including the target column"""

# inspect data types for each Column
df.dtypes

"""* There are 2 columns ["education", "BPMeds"] have incorrect data types, since they are nominal data with float64 data type."""

# look for instances of missing data and possibly errant values
df.info()

"""* We have 4238 rows in the datasets, therefore the columns ["education", "cigsPerDay", "BPMeds", "totChol", "BMI", "heartRate", "glucose"] have missing values."""

# Check number of unique values in each column
df.nunique()

"""* Columns ["male", "currentSmoker", "BMeds", "prevalentStrike", "prevalentHyp", "diabetes"] are nominal attributes each of them has only 2 values, while column ["education"] has 4 values and also is a nominal value."""

df.TenYearCHD.value_counts()

"""* We have a problem here, the dataset isn't balanced!"""

# Check the characteristics of the dataset
df.iloc[:,np.r_[1,4,9:15]].describe()

# Printing the last few lines to see how the data
df.tail()

"""<a id='preprocessin'></a>
## Data Preprocessing

### Data Cleaning (Fix problems in the dataset!)

__Duplicated Data__
"""

# Check duplicated data
df.duplicated().sum()

"""* That's great! The dataset has no duplicated rows!

__Renaming Data Columns__
"""

# rename the column male to gender to be more general
df.rename(columns={"male": "gender"}, inplace= True)

# lowercase the columns names
df.rename(columns = lambda X: X.lower(), inplace= True)
df.columns

# separate the columns names
df.rename(columns={"currentsmoker": "current_smoker", "cigsperday": "cigs_per_day", 
                   "bpmeds": "bp_meds","prevalentstroke": "prevalent_stroke", 
                   "prevalenthyp": "prevalent_hyp","totchol": "tot_chol", 
                   "sysbp": "sys_bp", "diabp": "dia_bp", "heartrate": "heart_rate"}, inplace= True)

df.columns

"""* Now datasets columns are clean!

__Missing Data__
"""

# print number of NaN Values
df.isnull().sum()

# delete rows with missing values
df.dropna(inplace = True)

# Check for any NaN Values
df.isnull().sum().any()

"""* The dataset now has no missing data!

__Incorrect Data Types__
"""

# Convert columns "education", "bp_meds" to np.int64
df = df.astype({"education": np.int64, "bp_meds": np.int64})
df.dtypes

"""* Columns "education", "bp_meds" have correct data types now!

__Removing Outliers__
"""

Index = np.r_[1,4,9:15]
plt.figure(figsize=(16,5))
df.iloc[:,Index].boxplot()
plt.title("Distribution of the values ​​of all potential predictors")
plt.show()

outliers = ['age','cigs_per_day', 'tot_chol', 'sys_bp','dia_bp', 'bmi', 'heart_rate', 'glucose']
for column in outliers:
  Q1,Q3 = np.percentile(df[column],[25,75])
  IQR = Q3 - Q1
  lower_fence = Q1 - (1.5*IQR)
  upper_fence = Q3 + (1.5*IQR)  
  df[column] = df[column].apply(lambda x: upper_fence if x>upper_fence
                                              else lower_fence if x<lower_fence else x)

plt.figure(figsize=(16,5))
sns.boxplot(data=df.iloc[:,Index])
plt.title("Distribution of the values ​​of all potential predictors")
plt.grid()
plt.show()

"""### Saving Data for Future work

"""

df.to_csv('framingham_clean_2.csv', index=False)

df_clean = pd.read_csv('framingham_clean_2.csv')
df_clean.head()